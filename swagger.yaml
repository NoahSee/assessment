openapi: 3.0.0
info:
  title: Authentication API
  description: API for user authentication including registration and login.
  version: 1.0.0
paths:
  /api/applicants/:
      get:
        summary: Get all applicants
        operationId: getAllApplicants
        responses:
          '200':
            description: A list of applicants
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Alice Smith
                      email:
                        type: string
                        example: alice.smith@example.com
                      date_of_birth:
                        type: string
                        format: date
                        example: 1990-05-15
                      sex:
                        type: string
                        example: Female
                      marital_status:
                        type: string
                        example: Single
                      employment_status:
                        type: string
                        example: Unemployed
                      household_json:
                        type: string
                        example: '[
                              {
                                  "name": "Alice Smith",
                                  "email": "alice.smith@example.com",
                                  "relationship": "Self",
                                  "employment_status": "Unemployed",
                                  "marital_status": "Single"
                              }
                          ]'
      post:
        summary: Add a new applicant
        operationId: addApplicant
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  date_of_birth:
                    type: string
                    format: date
                  sex:
                    type: string
                  marital_status:
                    type: string
                  employment_status:
                    type: string
                  household_json:
                    type: string
                required:
                  - id
                  - name
                  - email
                  - date_of_birth
                  - sex
                  - marital_status
                  - employment_status
                  - household_json
        responses:
          '201':
            description: Applicant added successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    message:
                      type: string
                      example: Applicant added successfully!
          '400':
            description: Bad request
          '500':
            description: Internal server error
  /api/applications/:
    get:
      summary: Get all applications
      operationId: getApplications
      responses:
        '200':
          description: A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    applicant_id:
                      type: integer
                      example: 1
                    scheme_id:
                      type: integer
                      example: 1
                    outcome:
                      type: string
                      example: Pending
    post:
      summary: Add a new application
      operationId: addApplication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicant_id:
                  type: integer
                scheme_id:
                  type: integer
              required:
                - applicant_id
                - scheme_id
      responses:
        '201':
          description: Application added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: Application added successfully!
        '400':
          description: Bad request
        '404':
          description: Applicant or scheme not found
        '500':
          description: Internal server error
  /api/applications/{application_id}/outcome:
    put:
      summary: Update the outcome of an application
      operationId: updateApplicationOutcome
      parameters:
        - name: application_id
          in: path
          required: true
          description: ID of the application to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                outcome:
                  type: string
                  enum: [Approved, Denied]
                  example: Approved
      responses:
        '200':
          description: Application outcome updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Application 1 updated to Approved.
        '400':
          description: Invalid outcome value
        '404':
          description: Application not found
        '500':
          description: Internal server error        
  /register:
    post:
      summary: Register a new user
      description: Registers a new user with a username and password.
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "admin"
                password:
                  type: string
                  example: "password123"
              required:
                - username
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully!"
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already exists!"
  /login:
    post:
      summary: Login to get an access token
      description: Authenticates a user and returns an access token.
      requestBody:
        description: User login data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "admin"
                password:
                  type: string
                  example: "password123"
              required:
                - username
                - password
      responses:
        '200':
          description: Successfully logged in and received an access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhcHBsaWNhdG9yIiwiaWF0IjoxNjExNzI1NjE3LCJleHBpcmF0aW9uIjoxNjExNzMwNjE3fQ.Tj-FM1rznXr9Vo30cNR9D9X3uE4rF0h4c0bdWzZHzWg"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"
